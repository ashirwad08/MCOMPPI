{
    "contents" : "source('~/MCOMPPI/source/distributeVelocity.R')\n\n# =============================================================================\n# simData(...) will simulate the minimal data set of 'size' required to realize\n# the MCOM Product Popularity Index (PPI). \n# simData(...) takes in the following parameters:\n# 'size'\n# 'inv.mean'\n# 'time.interval' in minutes\n# \n# =============================================================================\nsimData <- function(size, inv.mean, time.interval){\n  \n  # Initialize a data frame of required size, then add each column. \n  \n  # ----------------------------------------------------------------------------\n  # INVENTORY AVAILABILITY: \"inv.avail\"\n  ## A Gaussian distribution is assumed, to begin with the passed in inventory\n  ## average. It uses 40% of the average as the variation from mean inventory.\n  ## This approximates the \"Stock Control Model\". \n  ## We're not going to model the stock buffer here. Instead, we'll take all \n  ## 0 and - data points to approximate the lower gaussian ranges.\n  dat <- data.frame(inv.avail = as.integer(rnorm(size, \n                                                 mean=inv.mean, \n                                                 sd=0.4*inv.mean)))\n  ### flip signs for inv.avail < 0\n  dat[dat$inv.avail<0,'inv.avail'] <- dat[dat$inv.avail<0,'inv.avail']*(-1)\n  ### switch any remaining zeros to minimum acceptable inventory\n  dat[dat$inv.avail==0,'inv.avail'] <- \n    dat[dat$inv.avail==0,'inv.avail']+sd(dat$inv.avail)\n  ## Now, replicate each row a random number of times to smooth out the inventory\n  ## distribution somewhat.\n  dat.smooth <- dat[rep(row.names(dat), as.integer(runif(nrow(dat))*10)),]\n  # ----------------------------------------------------------------------------\n  \n  \n  \n  # ----------------------------------------------------------------------------\n  # Seq is an ordered sequence of record insertions which may be interpreted as a \n  # time series.\n  dat.smooth$seq <- 1:nrow(dat.smooth)\n  dat.smooth <- dat.smooth[,2:1]\n  # ----------------------------------------------------------------------------\n  \n  \n  \n  # ATB VELOCITY\n  # TOTAL ITEMS IN MCOM BAGS (POTENTIAL CONVERSIONS, ATB VELOCITY)/time interval\n  # ----------------------------------------------------------------------------\n  # We're going to use a Bimodal Gaussian distribution to simulate the velocity\n  # of items being added to bag in a day. The first period is a gaussian dist. \n  # that suggests early day passive buying with a peak, whereas the second period\n  # suggests increased buying activity and thus item velocity.\n  # Since this distribution simulates velocity over a day, we first break down \n  # the data set by intended time interval.\n  day.size <- as.integer((60*24)/time.interval) # minute intervals in a day\n  \n  ##break down the dataset into days\n  dat.days <- (nrow(dat.smooth)/day.size)\n  \n  ## function that returns a vector of bimodally scattered velocity of length\n  ## == day.size\n  ## repeat that function for entire dataset\n  ## TO DO!! GET rid of for. Use SPLIT for this.\n  dat.smooth$ATB.velocity <- 0\n  lr = 1\n  upr=day.size\n  for(i in 1:dat.days){\n    dat.smooth$ATB.velocity[lr:upr] <- distr.Velocity(day.size, inv.mean)\n    lr <- upr+1\n    upr <- upr+day.size\n  }\n  # ----------------------------------------------------------------------------\n  \n  # SELL VELOCITY \n  # TOTAL ITEMS SOLD (ACTUAL CONVERSIONS) / time interval\n  # ----------------------------------------------------------------------------\n  # Similar distribution to simulate add to bag behavior.\n  dat.smooth$sell.velocity <- 0\n  lr = 1\n  upr=day.size\n  for(i in 1:dat.days){\n    dat.smooth$sell.velocity[lr:upr] <- distr.Velocity(day.size, inv.mean)\n    lr <- upr+1\n    upr <- upr+day.size\n  }\n  # ----------------------------------------------------------------------------\n  \n  # ATB Momentum, Sell Momentum, Conversion Momentum\n  # ----------------------------------------------------------------------------\n  dat.smooth <- dat.smooth %>% mutate(ATB.momentum = inv.avail*ATB.velocity, \n                                      sell.momentum = inv.avail*sell.velocity, \n                                      conv.momentum = sell.momentum/ATB.momentum)\n  \n  \n  \n}",
    "created" : 1442180161979.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2299982021",
    "id" : "BFD7C15B",
    "lastKnownWriteTime" : 1442199499,
    "path" : "~/MCOMPPI/source/simData.R",
    "project_path" : "source/simData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}